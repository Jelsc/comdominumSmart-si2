"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta
# from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# load_dotenv(BASE_DIR.parent / ".env")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", "change-me-dev")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DJANGO_DEBUG", "1") == "1"

# ========== CONFIGURACI칍N AUTOM츼TICA DE HOSTS ==========
def get_allowed_hosts():
    """
    Configura autom치ticamente los hosts permitidos:
    - Desarrollo: localhost, 127.0.0.1
    - Docker: 0.0.0.0 y localhost
    - Producci칩n: cualquier host (*) - Django se encarga de la validaci칩n
    """
    env_hosts = os.getenv("DJANGO_ALLOWED_HOSTS", "")
    
    if env_hosts and env_hosts.strip():
        # Si hay hosts espec칤ficos en la variable de entorno
        hosts = [host.strip() for host in env_hosts.split(",") if host.strip()]
        print(f"游댢 [Django] Hosts configurados por variable de entorno: {hosts}")
        return hosts
    
    # Configuraci칩n autom치tica por defecto para m치xima compatibilidad
    default_hosts = ["*"]  # Permitir cualquier host - m치s flexible para contenedores y nube
    print(f"游깷 [Django] Hosts autom치ticos configurados: {default_hosts}")
    return default_hosts

ALLOWED_HOSTS = get_allowed_hosts()

# ========== CONFIGURACI칍N AUTOM츼TICA DE CORS ==========
def configure_cors():
    """
    Configura CORS autom치ticamente:
    - Permite todos los or칤genes por defecto para m치xima compatibilidad
    - Puede ser sobreescrito con variables de entorno
    """
    # Por defecto permitir todos los or칤genes para m치xima compatibilidad
    allow_all = os.getenv("CORS_ALLOW_ALL_ORIGINS", "True") == "True"
    
    if allow_all:
        print("游깴 [Django] CORS configurado para permitir TODOS los or칤genes")
        return True, []
    else:
        # URLs espec칤ficas si se desactiva allow_all
        frontend_urls = [
            "http://localhost:5173",
            "http://127.0.0.1:5173", 
            "http://localhost:3000",
            "http://127.0.0.1:3000",
            # Emulador Android
            "http://10.0.2.2:5173",
            "http://10.0.2.2:8000"
        ]
        
        # Agregar URLs de variables de entorno si existen
        env_frontend = os.getenv("FRONTEND_URL")
        env_frontend_alt = os.getenv("FRONTEND_URL_ALT")
        
        if env_frontend:
            frontend_urls.append(env_frontend)
        if env_frontend_alt:
            frontend_urls.append(env_frontend_alt)
        
        print(f"游꿢 [Django] CORS configurado para or칤genes espec칤ficos: {frontend_urls}")
        return False, frontend_urls

CORS_ALLOW_ALL_ORIGINS, CORS_ALLOWED_ORIGINS = configure_cors()
CORS_ALLOW_CREDENTIALS = True  # Habilitar cookies/sesi칩n

# ========== VARIABLES DE FRONTEND PARA COMPATIBILIDAD ==========
# Estas variables se mantienen para compatibilidad con configuraciones existentes
FRONTEND_URL = os.getenv("FRONTEND_URL", "http://localhost:5173")
FRONTEND_URL_ALT = os.getenv("FRONTEND_URL_ALT", "http://127.0.0.1:5173")

print(f"游꿛 [Django] Frontend URLs configuradas: {FRONTEND_URL}, {FRONTEND_URL_ALT}")
# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "django_filters",
    "rest_framework.authtoken",
    "rest_framework_simplejwt.token_blacklist",
    "corsheaders",
    "core",
    "users",
    "residentes",
    "personal",
    "notificaciones",
    "areas_comunes",
    # Requisito para allauth
    "django.contrib.sites",
    # Allauth (core + cuentas + social)
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    # Configura el modelo de usuario personalizado
    # Proveedores sociales (ej: Google)
    "allauth.socialaccount.providers.google",
    # dj-rest-auth (REST endpoints de login/registro/password/social)
    "dj_rest_auth",
    "dj_rest_auth.registration",
    # "dj_rest_auth.jwt_auth",
    "bitacora",
    "unidades",
    "inventario",
    "reservas",
]

AUTH_USER_MODEL = "users.CustomUser"

SITE_ID = 1  # importante para allauth


MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "users.middleware.PermissionMiddleware",  # Middleware de permisos autom치tico
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.i18n",
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",  # auth normal
    "allauth.account.auth_backends.AuthenticationBackend",  # allauth
]

WSGI_APPLICATION = "core.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("POSTGRES_DB", "condominio"),
        "USER": os.getenv("POSTGRES_USER", "postgres"),
        "PASSWORD": os.getenv("POSTGRES_PASSWORD", "postgres"),
        "HOST": os.getenv("POSTGRES_HOST", "127.0.0.1"),
        "PORT": os.getenv("POSTGRES_PORT", "5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "es"

TIME_ZONE = "America/La_Paz"

USE_I18N = True

# Desactivamos el soporte de zona horaria para usar la hora local directamente
# Esto evita que Django realice conversiones autom치ticas
USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CSRF_TRUSTED_ORIGINS = [
    FRONTEND_URL,
    FRONTEND_URL_ALT,
    # IP del emulador Android para desarrollo m칩vil
    "http://10.0.2.2:8000",
    "http://10.0.2.2:5173",
]

# A d칩nde redirigir despu칠s de login/logout
LOGIN_REDIRECT_URL = "/"
ACCOUNT_LOGOUT_REDIRECT_URL = "/"

# URLs de redirecci칩n para verificaci칩n de email
ACCOUNT_EMAIL_CONFIRMATION_AUTO_LOGIN = True
ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = (
    f"{FRONTEND_URL}/email-verification?verified=true"
)
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = (
    f"{FRONTEND_URL}/email-verification?verified=true"
)

# Pol칤tica de cuentas (aj칰stalo a tu gusto)
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = "username_email"  # username o email
ACCOUNT_EMAIL_VERIFICATION = (
    "none"  # Desactivado para nuestro sistema m칩vil personalizado
)
ACCOUNT_CONFIRM_EMAIL_ON_GET = True  # link de confirmaci칩n hace login al abrirlo
ACCOUNT_UNIQUE_EMAIL = True  # Cada email debe ser 칰nico
LOGIN_ON_EMAIL_CONFIRMATION = True

ACCOUNT_EMAIL_VERIFICATION_METHOD = (
    "link"  # Opciones: "link" (cl치sico) o "code" (moderno)
)


# En desarrollo, manda emails a la consola
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = (
    "mailhog"  # Aseg칰rate que este es el nombre del servicio en tu docker-compose.yml
)
EMAIL_PORT = 1025
DEFAULT_FROM_EMAIL = "no-reply@localhost"

# ====== DRF + JWT ======
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    # --- NUEVO ---
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,  # registros por p치gina
}
# REST_USE_JWT = True

REST_AUTH = {
    "USE_JWT": True,
    "JWT_AUTH_COOKIE": "jwt-auth-cookie",
    "JWT_AUTH_REFRESH_COOKIE": "jwt-refresh-cookie",
    "JWT_AUTH_HTTPONLY": True,  # True para que la cookie no sea accesible por JS
    "REGISTER_SERIALIZER": "users.serializers.CustomRegisterSerializer",
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "AUTH_HEADER_TYPES": ("Bearer",),
}

# ====== GOOGLE OAUTH CONFIGURATION ======
SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "SCOPE": [
            "profile",
            "email",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
        "OAUTH_PKCE_ENABLED": True,
    }
}

# ====== CACHE CONFIGURATION ======
# Configuraci칩n para verificaci칩n m칩vil
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "unique-snowflake",
    }
}

# ====== EMAIL BACKENDS ======
# Backend de email personalizado para verificaci칩n m칩vil
EMAIL_BACKENDS = {
    "default": "django.core.mail.backends.smtp.EmailBackend",
    "mobile_verification": "django.core.mail.backends.console.EmailBackend",  # Para testing
}

# Configuraci칩n de Google OAuth
GOOGLE_OAUTH2_CLIENT_ID = os.getenv("GOOGLE_OAUTH2_CLIENT_ID", "")
GOOGLE_OAUTH2_CLIENT_SECRET = os.getenv("GOOGLE_OAUTH2_CLIENT_SECRET", "")

# Configuraci칩n de sitios para allauth
SITE_ID = 1
